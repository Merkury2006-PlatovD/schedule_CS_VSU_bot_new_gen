from logging import Logger

import telebot
from telebot.types import Message

from src.authentication_service.authentification_service import AuthenticationService
from src.authentication_service.util.enum import UpdateType
from src.authentication_service.util.error import APIError
from src.parser_service.parser_service import ParserService
from src.parser_service.util.error import ScheduleParserFindError
from src.tools.keyboard_generators import *
from src.authentication_service.db.redis_repo import RedisDatabase


class BotController:
    __bot: telebot.TeleBot
    __parser_service: ParserService
    __authentication_service: AuthenticationService
    __redis_db: RedisDatabase
    __logger: Logger

    def __init__(self, bot, parser_service, authentication_service, redis_db: RedisDatabase, logger):
        self.__bot = bot
        self.__parser_service = parser_service
        self.__authentication_service = authentication_service
        self.__redis_db = redis_db
        self.__logger = logger

    def start_controller(self):
        self.set_handlers()

    def set_handlers(self):
        def set_bot_commands_menu():
            self.__bot.set_my_commands([
                telebot.types.BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
                telebot.types.BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
                telebot.types.BotCommand("info", "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"),
                telebot.types.BotCommand("updateinfo", "–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"),
                telebot.types.BotCommand("mistake", "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"),
                telebot.types.BotCommand("znam", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"),
                telebot.types.BotCommand("chis", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–∏—Ç–µ–ª—å"),
                telebot.types.BotCommand("getapi", "–ü–æ–ª—É—á–∏—Ç—å API-—Ç–æ–∫–µ–Ω"),
                telebot.types.BotCommand("deleteapi", "–£–¥–∞–ª–∏—Ç—å API-—Ç–æ–∫–µ–Ω")
            ])

        @self.__bot.message_handler(commands=['start'])
        def handle_start(message):
            """
            –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/start" –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ user_exists(user_id). –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ –±–æ—Ç–∞.

            Args:
                message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
            """
            set_bot_commands_menu()
            user_id = message.from_user.id
            try:
                user_exists = self.__authentication_service.has_user(user_id)
                if not user_exists:
                    self.__authentication_service.add_user(user_id)
                    self.__bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())
                else:
                    self.__bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                    self.__bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                                            reply_markup=get_persistent_keyboard())
            except Exception as err:
                handle_error(user_id, err, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start")

        @self.__bot.message_handler(commands=['updateinfo'])
        def handle_profile_update(message):
            """
            –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/updateinfo" –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î.

            Args:
                message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
            """
            user_id = message.from_user.id
            try:
                if not self.__authentication_service.has_user(user_id):
                    self.__authentication_service.add_user(user_id)
                self.__bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())
            except Exception as err:
                handle_error(user_id, err, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /updateinfo")

        @self.__bot.message_handler(commands=['help'])
        def handle_help(message):
            """
            –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/help" –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

            Args:
                message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
            """
            self.__bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: \n"
                                                          "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —è —É–∑–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                                                          "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /updateinfo, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n"
                                                          "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n"
                                                          "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /mistake, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                                                          "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /znam, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å\n"
                                                          "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /chis, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–∏—Ç–µ–ª—å")

        @self.__bot.message_handler(commands=['info'])
        def handle_info(message):
            user_id = message.from_user.id
            try:
                user = self.__authentication_service.get_user(user_id)
                self.__bot.send_message(message.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ: \n"
                                                              f"–¢–≤–æ–π –∫—É—Ä—Å: {user.get_course()}\n"
                                                              f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {user.get_main_group()}\n"
                                                              f"–¢–≤–æ—è –ø–æ–¥–≥—Ä—É–ø–ø–∞: {user.get_sub_group()}")
            except Exception as err:
                handle_error(user_id, err, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /info")

        @self.__bot.message_handler(commands=['mistake'])
        def handle_mistake_report(message):
            self.__bot.send_message(message.from_user.id,
                                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ñ–∞–∫—Ç –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–º –ª–∏—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã!",
                                    reply_markup=get_mistake_report_keyboard())

        @self.__bot.message_handler(commands=['getUsersPerDay'])
        def handle_users_per_day_request(message):
            self.__bot.send_message(message.from_user.id,
                                    f"–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å {self.__redis_db.get_users_per_day()}")

        @self.__bot.message_handler(commands=['chis', 'znam'])
        def handle_chis_znam_schedule(message):
            user_id = message.from_user.id
            print(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {message.from_user.username}")
            self.__redis_db.increment_users_per_day()

            try:
                if not self.__authentication_service.has_user(user_id):
                    self.__authentication_service.add_user(user_id)
                    self.__bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())
                else:
                    try:
                        out_data_formated = f"–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {"—á–∏—Å–ª–∏—Ç–µ–ª—å" if message.text == '/chis' else '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'}:\n\n"
                        days_map = {"üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "üìÖ –í—Ç–æ—Ä–Ω–∏–∫": 1, "üìÖ –°—Ä–µ–¥–∞": 2, "üìÖ –ß–µ—Ç–≤–µ—Ä–≥": 3, "üìÖ –ü—è—Ç–Ω–∏—Ü–∞": 4,
                                    "üìÖ –°—É–±–±–æ—Ç–∞": 5}
                        user = self.__authentication_service.get_user(user_id)
                        week = 0 if message.text == '/chils' else 1

                        for key, val in days_map.items():
                            schedule = self.__parser_service.get_schedule_on_day(user, val, week=week)
                            out_data_formated += f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {key.split(' ')[-1]}:*\n\n"
                            for key_day, val_day in schedule.items():
                                if val_day is None or val_day.strip() == "":
                                    val_day = "‚Äî –ù–µ—Ç –ø–∞—Ä—ã ‚Äî"
                                out_data_formated += f"üïí *{key_day}*\nüìñ {val_day}\n\n"

                        self.__bot.send_message(user_id, out_data_formated, parse_mode="Markdown")
                    except (ScheduleParserFindError, TypeError, ValueError) as e:
                        handle_error(user_id, e,
                                     "–í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å–∏–º –í–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ú—ã —Å–¥–µ–ª–∞–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å.\n\n‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\nüîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏—Ö –µ—â–µ —Ä–∞–∑.")
                        handle_profile_update(message)
            except Exception as err:
                handle_error(user_id, err, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é")

        @self.__bot.message_handler(commands=['getapi'])
        def handle_api_get(message: Message):
            user_id = message.from_user.id
            try:
                api_key = self.__authentication_service.add_new_api_key(user_id)
                self.__bot.send_message(user_id, f"Your API key:\n{api_key}")
            except APIError as err:
                handle_error(user_id, err,
                             "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–æ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

        @self.__bot.message_handler(commands=['deleteapi'])
        def handle_api_key_delete(message: Message):
            user_id = message.from_user.id
            try:
                self.__authentication_service.remove_api_key(user_id)
                self.__bot.send_message(user_id, "–ö–ª—é—á API —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–æ–π getapi")
            except Exception as err:
                handle_error(user_id, err, '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è API')

        @self.__bot.message_handler(
            func=lambda message: message.text not in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
                                                      "üìÖ –°—É–±–±–æ—Ç–∞"])
        def handle_error_message(message):
            user_id = message.from_user.id
            self.__bot.send_message(user_id,
                                    "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ /help –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

        @self.__bot.message_handler(
            func=lambda message: message.text in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
                                                  "üìÖ –°—É–±–±–æ—Ç–∞"])
        def handle_schedule_request(message):
            days_map = {"üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "üìÖ –í—Ç–æ—Ä–Ω–∏–∫": 1, "üìÖ –°—Ä–µ–¥–∞": 2, "üìÖ –ß–µ—Ç–≤–µ—Ä–≥": 3, "üìÖ –ü—è—Ç–Ω–∏—Ü–∞": 4,
                        "üìÖ –°—É–±–±–æ—Ç–∞": 5}
            user_id = message.from_user.id
            print(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {message.from_user.username}")
            self.__redis_db.increment_users_per_day()
            day = days_map[message.text]
            try:
                week_type = self.__redis_db.get_week_type()
                user = self.__authentication_service.get_user(user_id)
                schedule = self.__parser_service.get_schedule_on_day(user, day)
                out_data_formated = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {message.text.split(' ')[-1]}/{'—á–∏—Å–ª' if week_type == 0 else '–∑–Ω–∞–º'}:*\n\n"

                for key, val in schedule.items():
                    if val is None or val.strip() == "":
                        val = "‚Äî –ù–µ—Ç –ø–∞—Ä—ã ‚Äî"

                    out_data_formated += f"üïí *{key}*\nüìñ {val}\n\n"

                self.__bot.send_message(user_id, out_data_formated, parse_mode="Markdown")
            except (ScheduleParserFindError, TypeError, ValueError) as e:
                handle_error(user_id, e,
                             "–í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å–∏–º –í–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ú—ã —Å–¥–µ–ª–∞–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å.\n\n‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\nüîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏—Ö –µ—â–µ —Ä–∞–∑.")
                handle_profile_update(message)

        @self.__bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
        def handle_course(call):
            user_id = call.from_user.id
            course = int(call.data.split("_")[1])

            self.__authentication_service.update_user_data(UpdateType.course, user_id, course)
            keyboard = get_group_keyboard()
            self.__bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

        @self.__bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
        def handle_group(call):
            user_id = call.from_user.id
            group = int(call.data.split("_")[1])

            self.__authentication_service.update_user_data(UpdateType.main_group, user_id, group)
            keyboard = get_subgroup_keyboard()
            self.__bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

        @self.__bot.callback_query_handler(func=lambda call: call.data.startswith("subgroup_"))
        def handle_subgroup(call):
            user_id = call.from_user.id
            subgroup = int(call.data.split("_")[-1])

            self.__authentication_service.update_user_data(UpdateType.sub_group, user_id, subgroup)
            self.__bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            self.__bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                                    reply_markup=get_persistent_keyboard())

        @self.__bot.callback_query_handler(func=lambda call: call.data.startswith("mistake"))
        def handle_report_send(call):
            if call.data.split("_")[-1] == "1":
                user = self.__authentication_service.get_user(call.from_user.id)
                self.__bot.send_message(5109041126,
                                        f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É –∫—É—Ä—Å: {user.get_course()}, –≥—Ä—É–ø–ø–∞: {user.get_main_group()}, –ø–æ–¥–≥—Ä—É–ø–ø–∞: {user.get_sub_group()} –æ—Ç {call.from_user.username} c id {call.from_user.id}")
                self.__bot.send_message(call.from_user.id,
                                        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏ –º–æ–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            else:
                self.__bot.send_message(call.from_user.id, "–†–∞–¥—ã, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ)")

        def handle_error(user_id, error_log, error_text=""):
            error_text = f"‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n\n{error_text}\n\n{error_log}"
            self.__bot.send_message(user_id, error_text)
